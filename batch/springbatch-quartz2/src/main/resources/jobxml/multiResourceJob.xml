<bean:beans xmlns="http://www.springframework.org/schema/batch"
	xmlns:task="http://www.springframework.org/schema/task" xmlns:bean="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/batch
    http://www.springframework.org/schema/batch/spring-batch-2.2.xsd
    http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans-3.2.xsd 
    http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.0.xsd
    ">
	<job id="multiResourceJob">
		<step id="multiResourceJob.step1">
			<tasklet>
				<chunk reader="multiResourceItemReader" writer="playerWriter"
					commit-interval="10" />
			</tasklet>
		</step>
		<listeners>
			<listener ref="jobListener" />
		</listeners>
	</job>

	<!-- ############################################################################################## -->
	<!-- step.playerload start -->
	<!-- ############################################################################################## -->
	<!-- reader -->
	<bean:bean id="multiResourceItemReader"
		class="org.springframework.batch.item.file.MultiResourceItemReader">
		<bean:property name="resources" value="classpath:data/multi/multi*.csv" />
		<bean:property name="delegate" ref="flatFileItemReader" />
	</bean:bean>

	<!-- ItemReader reads a complete line one by one from input file -->
	<bean:bean id="flatFileItemReader" class="org.springframework.batch.item.file.FlatFileItemReader"
		scope="step">
		<bean:property name="lineMapper">
			<bean:bean class="org.springframework.batch.item.file.mapping.DefaultLineMapper">
				<bean:property name="fieldSetMapper">
					<!-- Mapper which maps each individual items in a record to properties 
						in POJO -->
					<bean:bean class="cn.learn.spring.batch.field.mapper.PlayerFieldSetMapper" />
				</bean:property>
				<bean:property name="lineTokenizer">
					<!-- A tokenizer class to be used when items in input record are separated 
						by specific characters -->
					<bean:bean
						class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer">
						<bean:property name="delimiter" value="," />
						<bean:property name="names"
							value="ID,lastName,firstName,position,birthYear,debutYear" />
					</bean:bean>
				</bean:property>
			</bean:bean>
		</bean:property>
	</bean:bean>

	<bean:bean id="playerWriter" class="cn.learn.spring.batch.writer.PlayerItemWriter">
	</bean:bean>
	
	<!-- listener -->
	<bean:bean id="jobListener" class="cn.learn.spring.batch.listener.MultiResultJobListener">
	</bean:bean>
	<!-- ############################################################################################## -->
	<!-- step.playerload end -->
	<!-- ############################################################################################## -->


	<!-- run every 10 seconds -->
	<!-- ############################################################################################## -->
	<!-- trigger 2分ごと起動 -->
	<!-- ############################################################################################## -->
	<bean:bean id="multiResourceJobCronTrigger"
		class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
		<bean:property name="jobDetail" ref="multiResourceJob1" />
		<bean:property name="cronExpression" value="0/20 * * * * ?" />
	</bean:bean>

	<bean:bean id="multiResourceJob1"
		class="org.springframework.scheduling.quartz.JobDetailFactoryBean">
		<bean:property name="jobClass"
			value="cn.learn.spring.batch.JobLauncherDetails" />
		<bean:property name="group" value="quartz-batch" />
		<bean:property name="jobDataAsMap">
			<bean:map>
				<bean:entry key="jobName" value="multiResourceJob" />
				<bean:entry key="jobLocator" value-ref="jobRegistry" />
				<bean:entry key="jobLauncher" value-ref="jobLauncher" />
			</bean:map>
		</bean:property>
	</bean:bean>
	<!-- ############################################################################################## -->
</bean:beans>
